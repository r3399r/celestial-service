AWSTemplateFormatVersion: '2010-09-09'
Transform: "AWS::Serverless-2016-10-31"
Description: >
    celestial-service RestAPIs, API Gateway, Permissions
    
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
    Function:
        Timeout: 30  # in seconds
Parameters:
  LambdaExecutionRole:
    Type: String
    Default: celestial-service-execution-role
    Description: The primary role in that gives the Lambda function permission to do its work.
  NodeJsVer:
    Type: String
    Default: nodejs12.x
  TargetEnvr:  
    Type: String
    Default: dev
    Description: The target environment for API Gateway deployment.

Resources:
    #######################################################
    ##### Start of API Gateway and associated lambdas #####
    #######################################################
    ServerlessApi:
      Type: AWS::Serverless::Api
      Properties:
        StageName: !Sub ${TargetEnvr}
        EndpointConfiguration: REGIONAL
        DefinitionBody: {
            "swagger": "2.0",
            "info": {
              "version": "2020-12-12T03:14:11Z",
              "title": !Sub "${TargetEnvr}-celestial-service-api"
            },
            "paths": {
              "/users": {
                "post": {
                  "produces": [
                    "application/json"
                  ],
                  "responses": {
                    "200": {
                      "description": "200 response",
                      "schema": {
                        "$ref": "#/definitions/Empty"
                      },
                      "headers": {
                        "Access-Control-Allow-Origin": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "x-amazon-apigateway-integration": {
                    "uri": !Sub "arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-1:278497686406:function:${TargetEnvr}-users/invocations",
                    "responses": {
                      "default": {
                        "statusCode": "200",
                        "responseParameters": {
                          "method.response.header.Access-Control-Allow-Origin": "'*'"
                        }
                      }
                    },
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT",
                    "type": "aws"
                  }
                },
                "options": {
                  "consumes": [
                    "application/json"
                  ],
                  "produces": [
                    "application/json"
                  ],
                  "responses": {
                    "200": {
                      "description": "200 response",
                      "schema": {
                        "$ref": "#/definitions/Empty"
                      },
                      "headers": {
                        "Access-Control-Allow-Origin": {
                          "type": "string"
                        },
                        "Access-Control-Allow-Methods": {
                          "type": "string"
                        },
                        "Access-Control-Allow-Headers": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "x-amazon-apigateway-integration": {
                    "responses": {
                      "default": {
                        "statusCode": "200",
                        "responseParameters": {
                          "method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'",
                          "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                          "method.response.header.Access-Control-Allow-Origin": "'*'"
                        }
                      }
                    },
                    "requestTemplates": {
                      "application/json": "{\"statusCode\": 200}"
                    },
                    "passthroughBehavior": "when_no_match",
                    "type": "mock"
                  }
                }
              }
            },
            "definitions": {
              "Empty": {
                "type": "object",
                "title": "Empty Schema"
              }
            }
          }
    LambdaUsers:
      Type: AWS::Serverless::Function
      Properties:
        Handler: index.users
        Runtime: !Sub ${NodeJsVer}
        FunctionName: !Sub ${TargetEnvr}-users
        Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}"
        CodeUri: ../../dist/webpack/lambda
        MemorySize: 128
        Environment:
          Variables:
            ENVR: !Sub ${TargetEnvr}
    InvokePermissionUsers:
      Type: AWS::Lambda::Permission
      DependsOn: [ServerlessApi, LambdaUsers]
      Properties:
          FunctionName: !Sub ${TargetEnvr}-users
          Action: lambda:InvokeFunction
          Principal: apigateway.amazonaws.com
          SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessApi}/*